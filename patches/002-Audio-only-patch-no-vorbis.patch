From 09f9b0df58ec63709e9aa9305958bff0c17bbefd Mon Sep 17 00:00:00 2001
From: Krzysztof Kubicki <krzysiek.kubicki@gmail.com>
Date: Tue, 9 Nov 2021 20:28:54 +0100
Subject: [PATCH] Audio-only patch

---
 Makefile.am  |   6 +-
 configure.ac |  88 +----
 metadata.c   | 927 ---------------------------------------------------
 minidlna.c   |   1 -
 monitor.c    |   2 -
 scanner.c    |  13 +-
 6 files changed, 3 insertions(+), 1034 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index 74859c1..9451d17 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -26,9 +26,8 @@ minidlnad_SOURCES = minidlna.c upnphttp.c upnpdescgen.c upnpsoap.c \
 			getifaddr.c process.c upnpglobalvars.c \
 			options.c minissdp.c uuid.c upnpevents.c \
 			sql.c utils.c metadata.c scanner.c monitor.c \
-			tivo_utils.c tivo_beacon.c tivo_commands.c \
 			playlist.c image_utils.c albumart.c log.c \
-			containers.c avahi.c tagutils/tagutils.c
+			containers.c tagutils/tagutils.c
 
 if HAVE_KQUEUE
 minidlnad_SOURCES += kqueue.c monitor_kqueue.c
@@ -54,7 +53,6 @@ minidlnad_LDADD = \
 	@LIBJPEG_LIBS@ \
 	@LIBID3TAG_LIBS@ \
 	@LIBSQLITE3_LIBS@ \
-	@LIBAVFORMAT_LIBS@ \
 	@LIBEXIF_LIBS@ \
 	@LIBINTL@ \
 	@LIBICONV@ \
@@ -65,8 +63,6 @@ testupnpdescgen_LDADD = \
 	@LIBJPEG_LIBS@ \
 	@LIBID3TAG_LIBS@ \
 	@LIBSQLITE3_LIBS@ \
-	@LIBAVFORMAT_LIBS@ \
-	@LIBAVUTIL_LIBS@ \
 	@LIBEXIF_LIBS@ \
 	-lFLAC $(flacogglibs) $(vorbislibs) $(avahilibs)
 
diff --git a/configure.ac b/configure.ac
index cb596b9..8e11b03 100644
--- a/configure.ac
+++ b/configure.ac
@@ -153,75 +153,13 @@ AC_CHECK_HEADER(linux/netlink.h,
 ################################################################################################################
 ### Library checks
 
-CPPFLAGS_SAVE="$CPPFLAGS"
-for dir in "" /usr/local $INCLUDE_DIR; do
-    if test -n "$dir"; then
-        CPPFLAGS="$CPPFLAGS_SAVE -I$dir"
-    fi
-    AC_CHECK_HEADERS([libavutil/avutil.h ffmpeg/libavutil/avutil.h libav/libavutil/avutil.h avutil.h ffmpeg/avutil.h libav/avutil.h], [HAVE_LIBAVUTIL=1])
-    if test -z "$HAVE_LIBAVUTIL"; then
-        unset ac_cv_header_avutil_h
-        unset ac_cv_header_libavutil_avutil_h
-        unset ac_cv_header_ffmpeg_avutil_h
-        unset ac_cv_header_ffmpeg_libavutil_avutil_h
-        unset ac_cv_header_libav_avutil_h
-        unset ac_cv_header_libav_libavutil_avutil_h
-        continue
-    fi
-    break
-done
-if test -z "$HAVE_LIBAVUTIL"; then
-    AC_MSG_ERROR([libavutil headers not found or not usable])
-fi
-
-CPPFLAGS_SAVE="$CPPFLAGS"
-for dir in "" /usr/local $INCLUDE_DIR; do
-    if test -n "$dir"; then
-        CPPFLAGS="$CPPFLAGS_SAVE -I$dir"
-    fi
-    AC_CHECK_HEADERS([libavcodec/avcodec.h ffmpeg/libavcodec/avcodec.h libav/libavcodec/avcodec.h avcodec.h ffmpeg/avcodec.h libav/avcodec.h], [HAVE_LIBAVCODEC=1])
-    if test -z "$HAVE_LIBAVCODEC"; then
-        unset ac_cv_header_avcodec_h
-        unset ac_cv_header_libavcodec_avcodec_h
-        unset ac_cv_header_ffmpeg_avcodec_h
-        unset ac_cv_header_ffmpeg_libavcodec_avcodec_h
-        unset ac_cv_header_libav_avcodec_h
-        unset ac_cv_header_libav_libavcodec_avcodec_h
-        continue
-    fi
-    break
-done
-if test -z "$HAVE_LIBAVCODEC"; then
-    AC_MSG_ERROR([libavcodec headers not found or not usable])
-fi
-
-CPPFLAGS_SAVE="$CPPFLAGS"
-for dir in "" /usr/local $INCLUDE_DIR; do
-    if test -n "$dir"; then
-        CPPFLAGS="$CPPFLAGS_SAVE -I$dir"
-    fi
-    AC_CHECK_HEADERS([libavformat/avformat.h ffmpeg/libavformat/avformat.h libav/libavformat/avformat.h avformat.h ffmpeg/avformat.h libav/avformat.h], [HAVE_LIBAVFORMAT=1])
-    if test -z "$HAVE_LIBAVFORMAT"; then
-        unset ac_cv_header_avformat_h
-        unset ac_cv_header_libavformat_avformat_h
-        unset ac_cv_header_ffmpeg_avformat_h
-        unset ac_cv_header_ffmpeg_libavformat_avformat_h
-        unset ac_cv_header_libav_avformat_h
-        unset ac_cv_header_libav_libavformat_avformat_h
-        continue
-    fi
-    break
-done
-if test -z "$HAVE_LIBAVFORMAT"; then
-    AC_MSG_ERROR([libavformat headers not found or not usable])
-fi
 
 CPPFLAGS_SAVE="$CPPFLAGS"
 for dir in "" /usr/local $INCLUDE_DIR; do
     if test -n "$dir"; then
         CPPFLAGS="$CPPFLAGS -I$dir"
     fi
-    AC_CHECK_HEADERS([jpeglib.h sqlite3.h libexif/exif-loader.h id3tag.h ogg/ogg.h vorbis/codec.h FLAC/metadata.h],,[unset $as_ac_Header; break],)
+    AC_CHECK_HEADERS([jpeglib.h sqlite3.h libexif/exif-loader.h id3tag.h FLAC/metadata.h],,[unset $as_ac_Header; break],)
     if test x"$ac_cv_header_jpeglib_h" != x"yes"; then
         CPPFLAGS="$CPPFLAGS_SAVE"
         continue
@@ -234,12 +172,6 @@ for dir in "" /usr/local $INCLUDE_DIR; do
     elif test x"$ac_cv_header_id3tag_h" != x"yes"; then
         CPPFLAGS="$CPPFLAGS_SAVE"
         continue
-    elif test x"$ac_cv_header_ogg_ogg_h" != x"yes"; then
-        CPPFLAGS="$CPPFLAGS_SAVE"
-        continue
-    elif test x"$ac_cv_header_vorbis_codec_h" != x"yes"; then
-        CPPFLAGS="$CPPFLAGS_SAVE"
-        continue
     elif test x"$ac_cv_header_FLAC_metadata_h" != x"yes"; then
         CPPFLAGS="$CPPFLAGS_SAVE"
         continue
@@ -251,8 +183,6 @@ test x"$ac_cv_header_jpeglib_h" != x"yes" && AC_MSG_ERROR([libjpeg headers not f
 test x"$ac_cv_header_sqlite3_h" != x"yes" && AC_MSG_ERROR([libsqlite3 headers not found or not usable])
 test x"$ac_cv_header_libexif_exif_loader_h" != x"yes" && AC_MSG_ERROR([libexif headers not found or not usable])
 test x"$ac_cv_header_id3tag_h" != x"yes" && AC_MSG_ERROR([libid3tag headers not found or not usable])
-test x"$ac_cv_header_ogg_ogg_h" != x"yes" && AC_MSG_ERROR([libogg headers not found or not usable])
-test x"$ac_cv_header_vorbis_codec_h" != x"yes" && AC_MSG_ERROR([libvorbis headers not found or not usable])
 test x"$ac_cv_header_FLAC_metadata_h" != x"yes" && AC_MSG_ERROR([libFLAC headers not found or not usable])
 
 CFLAGS_SAVE="$CFLAGS"
@@ -430,22 +360,6 @@ done
 test x"$ac_cv_lib_sqlite3_sqlite3_open" = x"yes" || AC_MSG_ERROR([Could not find libsqlite3])
 AC_SUBST(LIBSQLITE3_LIBS)
 
-LDFLAGS_SAVE="$LDFLAGS"
-for dir in "" /usr/local $SEARCH_DIR; do
-    if test -n "$dir"; then
-        LDFLAGS="$LDFLAGS -L$dir/lib"
-    fi
-    AC_CHECK_LIB([avformat -lavcodec -lavutil -lz], [avformat_open_input], [LIBAVFORMAT_LIBS="-lavformat -lavcodec -lavutil -lz"],
-		 [AC_CHECK_LIB([avformat -lavcodec -lavutil -lz], [av_open_input_file], [LIBAVFORMAT_LIBS="-lavformat -lavcodec -lavutil -lz"],
-		  [unset ac_cv_lib_avformat_av_open_input_file; unset ac_cv_lib_avformat_avformat_open_input; LDFLAGS="$LDFLAGS_SAVE"; continue])])
-    break
-done
-if test x"$ac_cv_lib_avformat__lavcodec__lavutil__lz___av_open_input_file" != x"yes" &&
-   test x"$ac_cv_lib_avformat__lavcodec__lavutil__lz___avformat_open_input" != x"yes"; then
-   AC_MSG_ERROR([Could not find libavformat - part of ffmpeg])
-fi
-AC_SUBST(LIBAVFORMAT_LIBS)
-
 AC_CHECK_LIB(pthread, pthread_create)
 
 # test if we have vorbisfile
diff --git a/metadata.c b/metadata.c
index 4781db7..5942112 100644
--- a/metadata.c
+++ b/metadata.c
@@ -31,7 +31,6 @@
 #include <libexif/exif-loader.h>
 #include <jpeglib.h>
 #include <setjmp.h>
-#include "libav.h"
 
 #include "upnpglobalvars.h"
 #include "tagutils/tagutils.h"
@@ -681,929 +680,3 @@ no_exifdata:
 	return ret;
 }
 
-int64_t
-GetVideoMetadata(const char *path, const char *name)
-{
-	struct stat file;
-	int ret, i;
-	struct tm *modtime;
-	AVFormatContext *ctx = NULL;
-	AVStream *astream = NULL, *vstream = NULL;
-	int audio_stream = -1, video_stream = -1;
-	enum audio_profiles audio_profile = PROFILE_AUDIO_UNKNOWN;
-	char fourcc[4];
-	int64_t album_art = 0;
-	char nfo[MAXPATHLEN], *ext;
-	struct song_metadata video;
-	metadata_t m;
-	uint32_t free_flags = 0xFFFFFFFF;
-	char *path_cpy, *basepath;
-
-	memset(&m, '\0', sizeof(m));
-	memset(&video, '\0', sizeof(video));
-
-	//DEBUG DPRINTF(E_DEBUG, L_METADATA, "Parsing video %s...\n", name);
-	if ( stat(path, &file) != 0 )
-		return 0;
-	//DEBUG DPRINTF(E_DEBUG, L_METADATA, " * size: %jd\n", file.st_size);
-
-	ret = lav_open(&ctx, path);
-	if( ret != 0 )
-	{
-		char err[128];
-		av_strerror(ret, err, sizeof(err));
-		DPRINTF(E_WARN, L_METADATA, "Opening %s failed! [%s]\n", path, err);
-		return 0;
-	}
-	//dump_format(ctx, 0, NULL, 0);
-	for( i=0; i < ctx->nb_streams; i++)
-	{
-		if( lav_codec_type(ctx->streams[i]) == AVMEDIA_TYPE_AUDIO &&
-		    audio_stream == -1 )
-		{
-			audio_stream = i;
-			astream = ctx->streams[audio_stream];
-			continue;
-		}
-		else if( lav_codec_type(ctx->streams[i]) == AVMEDIA_TYPE_VIDEO &&
-		         !lav_is_thumbnail_stream(ctx->streams[i], &m.thumb_data, &m.thumb_size) &&
-		         video_stream == -1 )
-		{
-			video_stream = i;
-			vstream = ctx->streams[video_stream];
-			continue;
-		}
-	}
-	path_cpy = strdup(path);
-	basepath = basename(path_cpy);
-	if( !vstream )
-	{
-		/* This must not be a video file. */
-		lav_close(ctx);
-		if( !is_audio(path) )
-			DPRINTF(E_DEBUG, L_METADATA, "File %s does not contain a video stream.\n", basepath);
-		free(path_cpy);
-		return 0;
-	}
-
-	if( astream )
-	{
-		aac_object_type_t aac_type = AAC_INVALID;
-		switch( lav_codec_id(astream) )
-		{
-			case AV_CODEC_ID_MP3:
-				audio_profile = PROFILE_AUDIO_MP3;
-				break;
-			case AV_CODEC_ID_AAC:
-				if( !lav_codec_extradata(astream) )
-				{
-					DPRINTF(E_DEBUG, L_METADATA, "No AAC type\n");
-				}
-				else
-				{
-					uint8_t data;
-					memcpy(&data, lav_codec_extradata(astream), 1);
-					aac_type = data >> 3;
-				}
-				switch( aac_type )
-				{
-					/* AAC Low Complexity variants */
-					case AAC_LC:
-					case AAC_LC_ER:
-						if( lav_sample_rate(astream) < 8000 ||
-						    lav_sample_rate(astream) > 48000 )
-						{
-							DPRINTF(E_DEBUG, L_METADATA, "Unsupported AAC: sample rate is not 8000 < %d < 48000\n",
-								lav_sample_rate(astream));
-							break;
-						}
-						/* AAC @ Level 1/2 */
-						if( lav_channels(astream) <= 2 &&
-						    lav_bit_rate(astream) <= 576000 )
-							audio_profile = PROFILE_AUDIO_AAC;
-						else if( lav_channels(astream) <= 6 &&
-							 lav_bit_rate(astream) <= 1440000 )
-							audio_profile = PROFILE_AUDIO_AAC_MULT5;
-						else
-							DPRINTF(E_DEBUG, L_METADATA, "Unhandled AAC: %lld channels, %lld bitrate\n",
-								(long long)lav_channels(astream),
-								(long long)lav_bit_rate(astream));
-						break;
-					default:
-						DPRINTF(E_DEBUG, L_METADATA, "Unhandled AAC type [%d]\n", aac_type);
-						break;
-				}
-				break;
-			case AV_CODEC_ID_AC3:
-			case AV_CODEC_ID_DTS:
-				audio_profile = PROFILE_AUDIO_AC3;
-				break;
-			case AV_CODEC_ID_WMAV1:
-			case AV_CODEC_ID_WMAV2:
-				/* WMA Baseline: stereo, up to 48 KHz, up to 192,999 bps */
-				if ( lav_bit_rate(astream) <= 193000 )
-					audio_profile = PROFILE_AUDIO_WMA_BASE;
-				/* WMA Full: stereo, up to 48 KHz, up to 385 Kbps */
-				else if ( lav_bit_rate(astream) <= 385000 )
-					audio_profile = PROFILE_AUDIO_WMA_FULL;
-				break;
-			case AV_CODEC_ID_WMAPRO:
-				audio_profile = PROFILE_AUDIO_WMA_PRO;
-				break;
-			case AV_CODEC_ID_MP2:
-				audio_profile = PROFILE_AUDIO_MP2;
-				break;
-			case AV_CODEC_ID_AMR_NB:
-				audio_profile = PROFILE_AUDIO_AMR;
-				break;
-			default:
-				if( (lav_codec_id(astream) >= AV_CODEC_ID_PCM_S16LE) &&
-				    (lav_codec_id(astream) < AV_CODEC_ID_ADPCM_IMA_QT) )
-					audio_profile = PROFILE_AUDIO_PCM;
-				else
-					DPRINTF(E_DEBUG, L_METADATA, "Unhandled audio codec [0x%X]\n", lav_codec_id(astream));
-				break;
-		}
-		m.frequency = lav_sample_rate(astream);
-		m.channels = lav_channels(astream);
-	}
-	if( vstream )
-	{
-		int off;
-		ts_timestamp_t ts_timestamp = NONE;
-		DPRINTF(E_DEBUG, L_METADATA, "Container: '%s' [%s]\n", ctx->iformat->name, basepath);
-		xasprintf(&m.resolution, "%dx%d", lav_width(vstream), lav_height(vstream));
-		if( ctx->bit_rate > 8 )
-			m.bitrate = ctx->bit_rate / 8;
-		if( ctx->duration > 0 )
-			m.duration = duration_str(ctx->duration / (AV_TIME_BASE/1000));
-
-		/* NOTE: The DLNA spec only provides for ASF (WMV), TS, PS, and MP4 containers.
-		 * Skip DLNA parsing for everything else. */
-		if( strcmp(ctx->iformat->name, "avi") == 0 )
-		{
-			xasprintf(&m.mime, "video/x-msvideo");
-			if( lav_codec_id(vstream) == AV_CODEC_ID_MPEG4 )
-			{
-				fourcc[0] = lav_codec_tag(vstream)     & 0xff;
-				fourcc[1] = lav_codec_tag(vstream)>>8  & 0xff;
-				fourcc[2] = lav_codec_tag(vstream)>>16 & 0xff;
-				fourcc[3] = lav_codec_tag(vstream)>>24 & 0xff;
-				if( memcmp(fourcc, "XVID", 4) == 0 ||
-				    memcmp(fourcc, "DX50", 4) == 0 ||
-				    memcmp(fourcc, "DIVX", 4) == 0 )
-					xasprintf(&m.creator, "DiVX");
-			}
-		}
-		else if( strcmp(ctx->iformat->name, "mov,mp4,m4a,3gp,3g2,mj2") == 0 &&
-		         ends_with(path, ".mov") )
-			xasprintf(&m.mime, "video/quicktime");
-		else if( strncmp(ctx->iformat->name, "matroska", 8) == 0 )
-			xasprintf(&m.mime, "video/x-matroska");
-		else if( strcmp(ctx->iformat->name, "flv") == 0 )
-			xasprintf(&m.mime, "video/x-flv");
-		if( m.mime )
-			goto video_no_dlna;
-
-		switch( lav_codec_id(vstream) )
-		{
-			case AV_CODEC_ID_MPEG1VIDEO:
-				if( strcmp(ctx->iformat->name, "mpeg") == 0 )
-				{
-					if( (lav_width(vstream)  == 352) &&
-					    (lav_height(vstream) <= 288) )
-					{
-						m.dlna_pn = strdup("MPEG1");
-					}
-					xasprintf(&m.mime, "video/mpeg");
-				}
-				break;
-			case AV_CODEC_ID_MPEG2VIDEO:
-				m.dlna_pn = malloc(64);
-				off = sprintf(m.dlna_pn, "MPEG_");
-				if( strcmp(ctx->iformat->name, "mpegts") == 0 )
-				{
-					int raw_packet_size;
-					int dlna_ts_present = dlna_timestamp_is_present(path, &raw_packet_size);
-					DPRINTF(E_DEBUG, L_METADATA, "Stream %d of %s is %s MPEG2 TS packet size %d\n",
-						video_stream, basepath, m.resolution, raw_packet_size);
-					off += sprintf(m.dlna_pn+off, "TS_");
-					if( (lav_width(vstream)  >= 1280) &&
-					    (lav_height(vstream) >= 720) )
-					{
-						off += sprintf(m.dlna_pn+off, "HD_NA");
-					}
-					else
-					{
-						off += sprintf(m.dlna_pn+off, "SD_");
-						if( (lav_height(vstream) == 576) ||
-						    (lav_height(vstream) == 288) )
-							off += sprintf(m.dlna_pn+off, "EU");
-						else
-							off += sprintf(m.dlna_pn+off, "NA");
-					}
-					if( raw_packet_size == MPEG_TS_PACKET_LENGTH_DLNA )
-					{
-						if (dlna_ts_present)
-							ts_timestamp = VALID;
-						else
-							ts_timestamp = EMPTY;
-					}
-					else if( raw_packet_size != MPEG_TS_PACKET_LENGTH )
-					{
-						DPRINTF(E_DEBUG, L_METADATA, "Unsupported DLNA TS packet size [%d] (%s)\n",
-							raw_packet_size, basepath);
-						free(m.dlna_pn);
-						m.dlna_pn = NULL;
-					}
-					switch( ts_timestamp )
-					{
-						case NONE:
-							xasprintf(&m.mime, "video/mpeg");
-							if( m.dlna_pn )
-								off += sprintf(m.dlna_pn+off, "_ISO");
-							break;
-						case VALID:
-							off += sprintf(m.dlna_pn+off, "_T");
-						case EMPTY:
-							xasprintf(&m.mime, "video/vnd.dlna.mpeg-tts");
-						default:
-							break;
-					}
-				}
-				else if( strcmp(ctx->iformat->name, "mpeg") == 0 )
-				{
-					DPRINTF(E_DEBUG, L_METADATA, "Stream %d of %s is %s MPEG2 PS\n",
-						video_stream, basepath, m.resolution);
-					off += sprintf(m.dlna_pn+off, "PS_");
-					if( (lav_height(vstream) == 576) ||
-					    (lav_height(vstream) == 288) )
-						off += sprintf(m.dlna_pn+off, "PAL");
-					else
-						off += sprintf(m.dlna_pn+off, "NTSC");
-					xasprintf(&m.mime, "video/mpeg");
-				}
-				else
-				{
-					DPRINTF(E_DEBUG, L_METADATA, "Stream %d of %s [%s] is %s non-DLNA MPEG2\n",
-						video_stream, basepath, ctx->iformat->name, m.resolution);
-					free(m.dlna_pn);
-					m.dlna_pn = NULL;
-				}
-				break;
-			case AV_CODEC_ID_H264:
-				m.dlna_pn = malloc(128);
-				off = sprintf(m.dlna_pn, "AVC_");
-
-				if( strcmp(ctx->iformat->name, "mpegts") == 0 )
-				{
-					AVRational display_aspect_ratio;
-					int fps, interlaced;
-					int raw_packet_size;
-					int dlna_ts_present = dlna_timestamp_is_present(path, &raw_packet_size);
-
-					off += sprintf(m.dlna_pn+off, "TS_");
-					if (lav_sample_aspect_ratio(vstream).num) {
-						av_reduce(&display_aspect_ratio.num, &display_aspect_ratio.den,
-						          lav_width(vstream) * lav_sample_aspect_ratio(vstream).num,
-						          lav_height(vstream) * lav_sample_aspect_ratio(vstream).den,
-						          1024*1024);
-					}
-					fps = lav_get_fps(vstream);
-					interlaced = lav_get_interlaced(vstream);
-					if( ((((lav_width(vstream) == 1920 || lav_width(vstream) == 1440) && lav_height(vstream) == 1080) ||
-					      (lav_width(vstream) == 720 && lav_height(vstream) == 480)) && fps == 59 && interlaced) ||
-					    ((lav_width(vstream) == 1280 && lav_height(vstream) == 720) && fps == 59 && !interlaced) )
-					{
-						if( (lav_profile(vstream) == FF_PROFILE_H264_MAIN || lav_profile(vstream) == FF_PROFILE_H264_HIGH) &&
-						    audio_profile == PROFILE_AUDIO_AC3 )
-						{
-							off += sprintf(m.dlna_pn+off, "HD_60_");
-							lav_profile(vstream) = FF_PROFILE_SKIP;
-						}
-					}
-					else if( ((lav_width(vstream) == 1920 && lav_height(vstream) == 1080) ||
-					          (lav_width(vstream) == 1440 && lav_height(vstream) == 1080) ||
-					          (lav_width(vstream) == 1280 && lav_height(vstream) ==  720) ||
-					          (lav_width(vstream) ==  720 && lav_height(vstream) ==  576)) &&
-					          interlaced && fps == 50 )
-					{
-						if( (lav_profile(vstream) == FF_PROFILE_H264_MAIN || lav_profile(vstream) == FF_PROFILE_H264_HIGH) &&
-						    audio_profile == PROFILE_AUDIO_AC3 )
-						{
-							off += sprintf(m.dlna_pn+off, "HD_50_");
-							lav_profile(vstream) = FF_PROFILE_SKIP;
-						}
-					}
-					switch( lav_profile(vstream) )
-					{
-						case FF_PROFILE_H264_BASELINE:
-						case FF_PROFILE_H264_CONSTRAINED_BASELINE:
-							off += sprintf(m.dlna_pn+off, "BL_");
-							if( lav_width(vstream)  <= 352 &&
-							    lav_height(vstream) <= 288 &&
-							    lav_bit_rate(vstream) <= 384000 )
-							{
-								off += sprintf(m.dlna_pn+off, "CIF15_");
-								break;
-							}
-							else if( lav_width(vstream)  <= 352 &&
-							         lav_height(vstream) <= 288 &&
-							         lav_bit_rate(vstream) <= 3000000 )
-							{
-								off += sprintf(m.dlna_pn+off, "CIF30_");
-								break;
-							}
-							/* Fall back to Main Profile if it doesn't match a Baseline DLNA profile. */
-							else
-								off -= 3;
-						default:
-						case FF_PROFILE_H264_MAIN:
-							off += sprintf(m.dlna_pn+off, "MP_");
-							if( lav_profile(vstream) != FF_PROFILE_H264_BASELINE &&
-							    lav_profile(vstream) != FF_PROFILE_H264_CONSTRAINED_BASELINE &&
-							    lav_profile(vstream) != FF_PROFILE_H264_MAIN )
-							{
-								DPRINTF(E_DEBUG, L_METADATA, "Unknown AVC profile %d; assuming MP. [%s]\n",
-									lav_profile(vstream), basepath);
-							}
-							if( lav_width(vstream)  <= 720 &&
-							    lav_height(vstream) <= 576 &&
-							    lav_bit_rate(vstream) <= 10000000 )
-							{
-								off += sprintf(m.dlna_pn+off, "SD_");
-							}
-							else if( lav_width(vstream)  <= 1920 &&
-							         lav_height(vstream) <= 1152 &&
-							         lav_bit_rate(vstream) <= 20000000 )
-							{
-								off += sprintf(m.dlna_pn+off, "HD_");
-							}
-							else
-							{
-								DPRINTF(E_DEBUG, L_METADATA, "Unsupported h.264 video profile! [%s, %dx%d, %lldbps : %s]\n",
-									m.dlna_pn, lav_width(vstream), lav_height(vstream),
-									(long long)lav_bit_rate(vstream), basepath);
-								free(m.dlna_pn);
-								m.dlna_pn = NULL;
-							}
-							break;
-						case FF_PROFILE_H264_HIGH:
-							off += sprintf(m.dlna_pn+off, "HP_");
-							if( lav_width(vstream)  <= 1920 &&
-							    lav_height(vstream) <= 1152 &&
-							    lav_bit_rate(vstream) <= 30000000 &&
-							    audio_profile == PROFILE_AUDIO_AC3 )
-							{
-								off += sprintf(m.dlna_pn+off, "HD_");
-							}
-							else
-							{
-								DPRINTF(E_DEBUG, L_METADATA, "Unsupported h.264 HP video profile! [%lldbps, %d audio : %s]\n",
-									(long long)lav_bit_rate(vstream), audio_profile, basepath);
-								free(m.dlna_pn);
-								m.dlna_pn = NULL;
-							}
-							break;
-						case FF_PROFILE_SKIP:
-							break;
-					}
-					if( !m.dlna_pn )
-						break;
-					switch( audio_profile )
-					{
-						case PROFILE_AUDIO_MP3:
-							off += sprintf(m.dlna_pn+off, "MPEG1_L3");
-							break;
-						case PROFILE_AUDIO_AC3:
-							off += sprintf(m.dlna_pn+off, "AC3");
-							break;
-						case PROFILE_AUDIO_AAC:
-						case PROFILE_AUDIO_AAC_MULT5:
-							off += sprintf(m.dlna_pn+off, "AAC_MULT5");
-							break;
-						default:
-							DPRINTF(E_DEBUG, L_METADATA, "No DLNA profile found for %s file [%s]\n",
-								m.dlna_pn, basepath);
-							free(m.dlna_pn);
-							m.dlna_pn = NULL;
-							break;
-					}
-					if( !m.dlna_pn )
-						break;
-					if( raw_packet_size == MPEG_TS_PACKET_LENGTH_DLNA )
-					{
-						if( lav_profile(vstream) == FF_PROFILE_H264_HIGH ||
-						    dlna_ts_present )
-							ts_timestamp = VALID;
-						else
-							ts_timestamp = EMPTY;
-					}
-					else if( raw_packet_size != MPEG_TS_PACKET_LENGTH )
-					{
-						DPRINTF(E_DEBUG, L_METADATA, "Unsupported DLNA TS packet size [%d] (%s)\n",
-							raw_packet_size, basepath);
-						free(m.dlna_pn);
-						m.dlna_pn = NULL;
-					}
-					switch( ts_timestamp )
-					{
-						case NONE:
-							if( m.dlna_pn )
-								off += sprintf(m.dlna_pn+off, "_ISO");
-							break;
-						case VALID:
-							off += sprintf(m.dlna_pn+off, "_T");
-						case EMPTY:
-							xasprintf(&m.mime, "video/vnd.dlna.mpeg-tts");
-						default:
-							break;
-					}
-				}
-				else if( strcmp(ctx->iformat->name, "mov,mp4,m4a,3gp,3g2,mj2") == 0 )
-				{
-					off += sprintf(m.dlna_pn+off, "MP4_");
-
-					switch( lav_profile(vstream) ) {
-					case FF_PROFILE_H264_BASELINE:
-					case FF_PROFILE_H264_CONSTRAINED_BASELINE:
-						if( lav_width(vstream)  <= 352 &&
-						    lav_height(vstream) <= 288 )
-						{
-							if( ctx->bit_rate < 600000 )
-								off += sprintf(m.dlna_pn+off, "BL_CIF15_");
-							else if( ctx->bit_rate < 5000000 )
-								off += sprintf(m.dlna_pn+off, "BL_CIF30_");
-							else
-								goto mp4_mp_fallback;
-
-							if( audio_profile == PROFILE_AUDIO_AMR )
-							{
-								off += sprintf(m.dlna_pn+off, "AMR");
-							}
-							else if( audio_profile == PROFILE_AUDIO_AAC )
-							{
-								off += sprintf(m.dlna_pn+off, "AAC_");
-								if( ctx->bit_rate < 520000 )
-								{
-									off += sprintf(m.dlna_pn+off, "520");
-								}
-								else if( ctx->bit_rate < 940000 )
-								{
-									off += sprintf(m.dlna_pn+off, "940");
-								}
-								else
-								{
-									off -= 13;
-									goto mp4_mp_fallback;
-								}
-							}
-							else
-							{
-								off -= 9;
-								goto mp4_mp_fallback;
-							}
-						}
-						else if( lav_width(vstream)  <= 720 &&
-						         lav_height(vstream) <= 576 )
-						{
-							if( lav_level(vstream) == 30 &&
-							    audio_profile == PROFILE_AUDIO_AAC &&
-							    ctx->bit_rate <= 5000000 )
-								off += sprintf(m.dlna_pn+off, "BL_L3L_SD_AAC");
-							else if( lav_level(vstream) <= 31 &&
-							         audio_profile == PROFILE_AUDIO_AAC &&
-							         ctx->bit_rate <= 15000000 )
-								off += sprintf(m.dlna_pn+off, "BL_L31_HD_AAC");
-							else
-								goto mp4_mp_fallback;
-						}
-						else if( lav_width(vstream)  <= 1280 &&
-						         lav_height(vstream) <= 720 )
-						{
-							if( lav_level(vstream) <= 31 &&
-							    audio_profile == PROFILE_AUDIO_AAC &&
-							    ctx->bit_rate <= 15000000 )
-								off += sprintf(m.dlna_pn+off, "BL_L31_HD_AAC");
-							else if( lav_level(vstream) <= 32 &&
-							         audio_profile == PROFILE_AUDIO_AAC &&
-							         ctx->bit_rate <= 21000000 )
-								off += sprintf(m.dlna_pn+off, "BL_L32_HD_AAC");
-							else
-								goto mp4_mp_fallback;
-						}
-						else
-							goto mp4_mp_fallback;
-						break;
-					case FF_PROFILE_H264_MAIN:
-					mp4_mp_fallback:
-						off += sprintf(m.dlna_pn+off, "MP_");
-						/* AVC MP4 SD profiles - 10 Mbps max */
-						if( lav_width(vstream)  <= 720 &&
-						    lav_height(vstream) <= 576 &&
-						    lav_bit_rate(vstream) <= 10000000 )
-						{
-							sprintf(m.dlna_pn+off, "SD_");
-							if( audio_profile == PROFILE_AUDIO_AC3 )
-								off += sprintf(m.dlna_pn+off, "AC3");
-							else if( audio_profile == PROFILE_AUDIO_AAC ||
-							         audio_profile == PROFILE_AUDIO_AAC_MULT5 )
-								off += sprintf(m.dlna_pn+off, "AAC_MULT5");
-							else if( audio_profile == PROFILE_AUDIO_MP3 )
-								off += sprintf(m.dlna_pn+off, "MPEG1_L3");
-							else
-								m.dlna_pn[10] = '\0';
-						}
-						else if( lav_width(vstream)  <= 1280 &&
-						         lav_height(vstream) <= 720 &&
-						         lav_bit_rate(vstream) <= 15000000 &&
-						         audio_profile == PROFILE_AUDIO_AAC )
-						{
-							off += sprintf(m.dlna_pn+off, "HD_720p_AAC");
-						}
-						else if( lav_width(vstream)  <= 1920 &&
-						         lav_height(vstream) <= 1080 &&
-						         lav_bit_rate(vstream) <= 21000000 &&
-						         audio_profile == PROFILE_AUDIO_AAC )
-						{
-							off += sprintf(m.dlna_pn+off, "HD_1080i_AAC");
-						}
-						if( strlen(m.dlna_pn) <= 11 )
-						{
-							DPRINTF(E_DEBUG, L_METADATA, "No DLNA profile found for %s file %s\n",
-								m.dlna_pn, basepath);
-							free(m.dlna_pn);
-							m.dlna_pn = NULL;
-						}
-						break;
-					case FF_PROFILE_H264_HIGH:
-						if( lav_width(vstream)  <= 1920 &&
-						    lav_height(vstream) <= 1080 &&
-						    lav_bit_rate(vstream) <= 25000000 &&
-						    audio_profile == PROFILE_AUDIO_AAC )
-						{
-							off += sprintf(m.dlna_pn+off, "HP_HD_AAC");
-						}
-						break;
-					default:
-						DPRINTF(E_DEBUG, L_METADATA, "AVC profile [%d] not recognized for file %s\n",
-							lav_profile(vstream), basepath);
-						free(m.dlna_pn);
-						m.dlna_pn = NULL;
-						break;
-					}
-				}
-				else
-				{
-					free(m.dlna_pn);
-					m.dlna_pn = NULL;
-				}
-				DPRINTF(E_DEBUG, L_METADATA, "Stream %d of %s is h.264\n", video_stream, basepath);
-				break;
-			case AV_CODEC_ID_MPEG4:
-				fourcc[0] = lav_codec_tag(vstream)     & 0xff;
-				fourcc[1] = lav_codec_tag(vstream)>>8  & 0xff;
-				fourcc[2] = lav_codec_tag(vstream)>>16 & 0xff;
-				fourcc[3] = lav_codec_tag(vstream)>>24 & 0xff;
-				DPRINTF(E_DEBUG, L_METADATA, "Stream %d of %s is MPEG4 [%c%c%c%c/0x%X]\n",
-					video_stream, basepath,
-					isprint(fourcc[0]) ? fourcc[0] : '_',
-					isprint(fourcc[1]) ? fourcc[1] : '_',
-					isprint(fourcc[2]) ? fourcc[2] : '_',
-					isprint(fourcc[3]) ? fourcc[3] : '_',
-					lav_codec_tag(vstream));
-
-				if( strcmp(ctx->iformat->name, "mov,mp4,m4a,3gp,3g2,mj2") == 0 )
-				{
-					m.dlna_pn = malloc(128);
-					off = sprintf(m.dlna_pn, "MPEG4_P2_");
-
-					if( ends_with(path, ".3gp") )
-					{
-						xasprintf(&m.mime, "video/3gpp");
-						switch( audio_profile )
-						{
-							case PROFILE_AUDIO_AAC:
-								off += sprintf(m.dlna_pn+off, "3GPP_SP_L0B_AAC");
-								break;
-							case PROFILE_AUDIO_AMR:
-								off += sprintf(m.dlna_pn+off, "3GPP_SP_L0B_AMR");
-								break;
-							default:
-								DPRINTF(E_DEBUG, L_METADATA, "No DLNA profile found for MPEG4-P2 3GP/%d file %s\n",
-								        audio_profile, basepath);
-								free(m.dlna_pn);
-								m.dlna_pn = NULL;
-								break;
-						}
-					}
-					else
-					{
-						if( ctx->bit_rate <= 1000000 &&
-						    audio_profile == PROFILE_AUDIO_AAC )
-						{
-							off += sprintf(m.dlna_pn+off, "MP4_ASP_AAC");
-						}
-						else if( ctx->bit_rate <= 4000000 &&
-						         lav_width(vstream)  <= 640 &&
-						         lav_height(vstream) <= 480 &&
-						         audio_profile == PROFILE_AUDIO_AAC )
-						{
-							off += sprintf(m.dlna_pn+off, "MP4_SP_VGA_AAC");
-						}
-						else
-						{
-							DPRINTF(E_DEBUG, L_METADATA, "Unsupported h.264 video profile! [%dx%d, %lldbps]\n",
-								lav_width(vstream),
-								lav_height(vstream),
-								(long long)ctx->bit_rate);
-							free(m.dlna_pn);
-							m.dlna_pn = NULL;
-						}
-					}
-				}
-				break;
-			case AV_CODEC_ID_WMV3:
-				/* I'm not 100% sure this is correct, but it works on everything I could get my hands on */
-				if( lav_codec_extradata(vstream) )
-				{
-					if( !((lav_codec_extradata(vstream)[0] >> 3) & 1) )
-						lav_level(vstream) = 0;
-					if( !((lav_codec_extradata(vstream)[0] >> 6) & 1) )
-						lav_profile(vstream) = 0;
-				}
-			case AV_CODEC_ID_VC1:
-				if( strcmp(ctx->iformat->name, "asf") != 0 )
-				{
-					DPRINTF(E_DEBUG, L_METADATA, "Skipping DLNA parsing for non-ASF VC1 file %s\n", path);
-					break;
-				}
-				m.dlna_pn = malloc(64);
-				off = sprintf(m.dlna_pn, "WMV");
-				DPRINTF(E_DEBUG, L_METADATA, "Stream %d of %s is VC1\n", video_stream, basepath);
-				xasprintf(&m.mime, "video/x-ms-wmv");
-				if( (lav_width(vstream)  <= 176) &&
-				    (lav_height(vstream) <= 144) &&
-				    (lav_level(vstream) == 0) )
-				{
-					off += sprintf(m.dlna_pn+off, "SPLL_");
-					switch( audio_profile )
-					{
-						case PROFILE_AUDIO_MP3:
-							off += sprintf(m.dlna_pn+off, "MP3");
-							break;
-						case PROFILE_AUDIO_WMA_BASE:
-							off += sprintf(m.dlna_pn+off, "BASE");
-							break;
-						default:
-							DPRINTF(E_DEBUG, L_METADATA, "No DLNA profile found for WMVSPLL/0x%X file %s\n",
-								audio_profile, basepath);
-							free(m.dlna_pn);
-							m.dlna_pn = NULL;
-							break;
-					}
-				}
-				else if( (lav_width(vstream)  <= 352) &&
-				         (lav_height(vstream) <= 288) &&
-				         (lav_profile(vstream) == 0) &&
-				         (ctx->bit_rate/8 <= 384000) )
-				{
-					off += sprintf(m.dlna_pn+off, "SPML_");
-					switch( audio_profile )
-					{
-						case PROFILE_AUDIO_MP3:
-							off += sprintf(m.dlna_pn+off, "MP3");
-							break;
-						case PROFILE_AUDIO_WMA_BASE:
-							off += sprintf(m.dlna_pn+off, "BASE");
-							break;
-						default:
-							DPRINTF(E_DEBUG, L_METADATA, "No DLNA profile found for WMVSPML/0x%X file %s\n",
-								audio_profile, basepath);
-							free(m.dlna_pn);
-							m.dlna_pn = NULL;
-							break;
-					}
-				}
-				else if( (lav_width(vstream)  <= 720) &&
-				         (lav_height(vstream) <= 576) &&
-				         (ctx->bit_rate/8 <= 10000000) )
-				{
-					off += sprintf(m.dlna_pn+off, "MED_");
-					switch( audio_profile )
-					{
-						case PROFILE_AUDIO_WMA_PRO:
-							off += sprintf(m.dlna_pn+off, "PRO");
-							break;
-						case PROFILE_AUDIO_WMA_FULL:
-							off += sprintf(m.dlna_pn+off, "FULL");
-							break;
-						case PROFILE_AUDIO_WMA_BASE:
-							off += sprintf(m.dlna_pn+off, "BASE");
-							break;
-						default:
-							DPRINTF(E_DEBUG, L_METADATA, "No DLNA profile found for WMVMED/0x%X file %s\n",
-								audio_profile, basepath);
-							free(m.dlna_pn);
-							m.dlna_pn = NULL;
-							break;
-					}
-				}
-				else if( (lav_width(vstream)  <= 1920) &&
-				         (lav_height(vstream) <= 1080) &&
-				         (ctx->bit_rate/8 <= 20000000) )
-				{
-					off += sprintf(m.dlna_pn+off, "HIGH_");
-					switch( audio_profile )
-					{
-						case PROFILE_AUDIO_WMA_PRO:
-							off += sprintf(m.dlna_pn+off, "PRO");
-							break;
-						case PROFILE_AUDIO_WMA_FULL:
-							off += sprintf(m.dlna_pn+off, "FULL");
-							break;
-						default:
-							DPRINTF(E_DEBUG, L_METADATA, "No DLNA profile found for WMVHIGH/0x%X file %s\n",
-								audio_profile, basepath);
-							free(m.dlna_pn);
-							m.dlna_pn = NULL;
-							break;
-					}
-				}
-				break;
-			case AV_CODEC_ID_MSMPEG4V3:
-				xasprintf(&m.mime, "video/x-msvideo");
-			default:
-				DPRINTF(E_DEBUG, L_METADATA, "Stream %d of %s is %s [type %d]\n",
-					video_stream, basepath, m.resolution, lav_codec_id(vstream));
-				break;
-		}
-	}
-
-	if( strcmp(ctx->iformat->name, "asf") == 0 )
-	{
-		if( readtags((char *)path, &video, &file, "en_US", "asf") == 0 )
-		{
-			if( video.title && *video.title )
-			{
-				m.title = escape_tag(trim(video.title), 1);
-			}
-			if( video.genre && *video.genre )
-			{
-				m.genre = escape_tag(trim(video.genre), 1);
-			}
-			if( video.contributor[ROLE_TRACKARTIST] && *video.contributor[ROLE_TRACKARTIST] )
-			{
-				m.artist = escape_tag(trim(video.contributor[ROLE_TRACKARTIST]), 1);
-			}
-			if( video.contributor[ROLE_ALBUMARTIST] && *video.contributor[ROLE_ALBUMARTIST] )
-			{
-				m.creator = escape_tag(trim(video.contributor[ROLE_ALBUMARTIST]), 1);
-			}
-			else
-			{
-				m.creator = m.artist;
-				free_flags &= ~FLAG_CREATOR;
-			}
-			if (!m.thumb_data)
-			{
-				m.thumb_data = video.image;
-				m.thumb_size = video.image_size;
-			}
-		}
-	}
-	#ifndef NETGEAR
-	#if LIBAVFORMAT_VERSION_INT >= ((52<<16)+(31<<8)+0)
-	else if( strcmp(ctx->iformat->name, "mov,mp4,m4a,3gp,3g2,mj2") == 0 )
-	{
-		if( ctx->metadata )
-		{
-			AVDictionaryEntry *tag = NULL;
-
-			//DEBUG DPRINTF(E_DEBUG, L_METADATA, "Metadata:\n");
-			while( (tag = av_dict_get(ctx->metadata, "", tag, AV_DICT_IGNORE_SUFFIX)) )
-			{
-				//DEBUG DPRINTF(E_DEBUG, L_METADATA, "  %-16s: %s\n", tag->key, tag->value);
-				if( strcmp(tag->key, "title") == 0 )
-					m.title = escape_tag(trim(tag->value), 1);
-				else if( strcmp(tag->key, "genre") == 0 )
-					m.genre = escape_tag(trim(tag->value), 1);
-				else if( strcmp(tag->key, "artist") == 0 )
-					m.artist = escape_tag(trim(tag->value), 1);
-				else if( strcmp(tag->key, "comment") == 0 )
-					m.comment = escape_tag(trim(tag->value), 1);
-			}
-		}
-	}
-	#endif
-	#endif
-video_no_dlna:
-
-#ifdef TIVO_SUPPORT
-	if( ends_with(path, ".TiVo") && is_tivo_file(path) )
-	{
-		if( m.dlna_pn )
-		{
-			free(m.dlna_pn);
-			m.dlna_pn = NULL;
-		}
-		m.mime = realloc(m.mime, 21);
-		strcpy(m.mime, "video/x-tivo-mpeg");
-	}
-#endif
-
-	strcpy(nfo, path);
-	ext = strrchr(nfo, '.');
-	if( ext )
-	{
-		strcpy(ext+1, "nfo");
-		if( access(nfo, R_OK) == 0 )
-			parse_nfo(nfo, &m);
-	}
-
-	if( !m.mime )
-	{
-		if( strcmp(ctx->iformat->name, "avi") == 0 )
-			xasprintf(&m.mime, "video/x-msvideo");
-		else if( strncmp(ctx->iformat->name, "mpeg", 4) == 0 )
-			xasprintf(&m.mime, "video/mpeg");
-		else if( strcmp(ctx->iformat->name, "asf") == 0 )
-			xasprintf(&m.mime, "video/x-ms-wmv");
-		else if( strcmp(ctx->iformat->name, "mov,mp4,m4a,3gp,3g2,mj2") == 0 )
-			if( ends_with(path, ".mov") )
-				xasprintf(&m.mime, "video/quicktime");
-			else
-				xasprintf(&m.mime, "video/mp4");
-		else if( strncmp(ctx->iformat->name, "matroska", 8) == 0 )
-			xasprintf(&m.mime, "video/x-matroska");
-		else if( strcmp(ctx->iformat->name, "flv") == 0 )
-			xasprintf(&m.mime, "video/x-flv");
-		else
-			DPRINTF(E_WARN, L_METADATA, "%s: Unhandled format: %s\n", path, ctx->iformat->name);
-	}
-
-	if( !m.date )
-	{
-		m.date = malloc(20);
-		modtime = localtime(&file.st_mtime);
-		strftime(m.date, 20, "%FT%T", modtime);
-	}
-
-	if( !m.title )
-	{
-		m.title = strdup(name);
-		strip_ext(m.title);
-	}
-
-	if (!m.disc && !m.track)
-	{
-		/* Search for Season and Episode in the filename */
-		char *p = (char*)name, *s;
-		while ((s = strpbrk(p, "Ss")))
-		{
-			unsigned season = strtoul(s+1, &p, 10);
-			unsigned episode = 0;
-			if (season > 0 && p)
-			{
-				while (isblank(*p) || ispunct(*p))
-					p++;
-				if (*p == 'E' || *p == 'e')
-					episode = strtoul(p+1, NULL, 10);
-			}
-			if (season && episode)
-			{
-				m.disc = season;
-				m.track = episode;
-			}
-			p = s + 1;
-		}
-	}
-
-	album_art = find_album_art(path, m.thumb_data, m.thumb_size);
-	freetags(&video);
-	lav_close(ctx);
-
-	ret = sql_exec(db, "INSERT into DETAILS"
-	                   " (PATH, SIZE, TIMESTAMP, DURATION, DATE, CHANNELS, BITRATE, SAMPLERATE, RESOLUTION,"
-	                   "  TITLE, CREATOR, ARTIST, GENRE, COMMENT, DLNA_PN, MIME, ALBUM_ART, DISC, TRACK) "
-	                   "VALUES"
-	                   " (%Q, %lld, %lld, %Q, %Q, %u, %u, %u, %Q, '%q', %Q, %Q, %Q, %Q, %Q, '%q', %lld, %u, %u);",
-	                   path, (long long)file.st_size, (long long)file.st_mtime, m.duration,
-	                   m.date, m.channels, m.bitrate, m.frequency, m.resolution,
-	                   m.title, m.creator, m.artist, m.genre, m.comment, m.dlna_pn,
-	                   m.mime, album_art, m.disc, m.track);
-	if( ret != SQLITE_OK )
-	{
-		DPRINTF(E_ERROR, L_METADATA, "Error inserting details for '%s'!\n", path);
-		ret = 0;
-	}
-	else
-	{
-		ret = sqlite3_last_insert_rowid(db);
-		check_for_captions(path, ret);
-	}
-	free_metadata(&m, free_flags);
-	free(path_cpy);
-
-	return ret;
-}
diff --git a/minidlna.c b/minidlna.c
index b2769ae..3126903 100644
--- a/minidlna.c
+++ b/minidlna.c
@@ -93,7 +93,6 @@
 #include "upnpevents.h"
 #include "scanner.h"
 #include "monitor.h"
-#include "libav.h"
 #include "log.h"
 #include "tivo_beacon.h"
 #include "tivo_utils.h"
diff --git a/monitor.c b/monitor.c
index 9e56bc7..b4d63f2 100644
--- a/monitor.c
+++ b/monitor.c
@@ -40,7 +40,6 @@
 #include "linux/inotify-syscalls.h"
 #endif
 #endif
-#include "libav.h"
 
 #include "upnpglobalvars.h"
 #include "monitor.h"
@@ -647,7 +646,6 @@ start_inotify(void)
 	if (setpriority(PRIO_PROCESS, 0, 19) == -1)
 		DPRINTF(E_WARN, L_INOTIFY,  "Failed to reduce inotify thread priority\n");
 	sqlite3_release_memory(1<<31);
-	lav_register_all();
 
 	while( !quitting )
 	{
diff --git a/scanner.c b/scanner.c
index f240a2f..2a8b32c 100644
--- a/scanner.c
+++ b/scanner.c
@@ -15,6 +15,7 @@
  * You should have received a copy of the GNU General Public License
  * along with MiniDLNA. If not, see <http://www.gnu.org/licenses/>.
  */
+#include <errno.h>
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
@@ -34,7 +35,6 @@
 #include <libintl.h>
 #endif
 #include <sqlite3.h>
-#include "libav.h"
 
 #include "scanner_sqlite.h"
 #include "upnpglobalvars.h"
@@ -53,9 +53,6 @@ typedef const struct dirent scan_filter;
 #else
 typedef struct dirent scan_filter;
 #endif
-#ifndef AV_LOG_PANIC
-#define AV_LOG_PANIC AV_LOG_FATAL
-#endif
 
 int valid_cache = 0;
 
@@ -466,12 +463,6 @@ insert_file(const char *name, const char *path, const char *parentID, int object
 		class = "item.imageItem.photo";
 		detailID = GetImageMetadata(path, name);
 	}
-	else if( mtype == TYPE_VIDEO && (types & TYPE_VIDEO) )
-	{
-		strcpy(base, VIDEO_DIR_ID);
-		class = "item.videoItem";
-		detailID = GetVideoMetadata(path, name);
-	}
 	else if( mtype == TYPE_PLAYLIST && (types & TYPE_PLAYLIST) )
 	{
 		if( insert_playlist(path, name) == 0 )
@@ -901,8 +892,6 @@ start_scanner(void)
 		DPRINTF(E_WARN, L_INOTIFY,  "Failed to reduce scanner thread priority\n");
 
 	setlocale(LC_COLLATE, "");
-	lav_register_all();
-	av_log_set_level(AV_LOG_PANIC);
 
 	if( GETFLAG(RESCAN_MASK) )
 		return start_rescan();
-- 
2.17.1

